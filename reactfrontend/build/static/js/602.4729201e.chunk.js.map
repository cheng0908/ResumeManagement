{"version":3,"file":"static/js/602.4729201e.chunk.js","mappings":"8HAAO,MCOP,E,QAJmBA,EAAMC,OAAO,CAC9BC,QDJqB,+B,gKEevB,MAAMC,EAAwB,CAC5B,SACA,SACA,WACA,SACA,WACA,MACA,aAsGF,EAnGeC,KACb,MAAOC,EAAKC,IAAUC,EAAAA,EAAAA,UAAwB,CAC5CC,MAAO,GACPC,MAAO,GACPC,UAAW,MAENC,EAAWC,IAAgBL,EAAAA,EAAAA,UAAqB,IACjDM,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACRC,EAAAA,EACGC,IAAgB,gBAChBC,MAAMC,IACLP,EAAaO,EAAQC,KAAK,IAE3BC,OAAOC,IACNC,MAAM,SACNC,QAAQC,IAAIH,EAAM,GAClB,GACH,IAgBH,OACEI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,UAASC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBACJF,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CACRC,aAAa,MACbC,MAAM,YACNC,QAAQ,WACRC,MAAO7B,EAAIG,MACX2B,SAAWC,GAAM9B,EAAO,IAAKD,EAAKG,MAAO4B,EAAEC,OAAOH,WAIpDL,EAAAA,EAAAA,MAACS,EAAAA,EAAW,CAACC,WAAS,EAAAX,SAAA,EACpBF,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAAAZ,SAAC,eACZF,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLP,MAAO7B,EAAII,MACXuB,MAAM,YACNG,SAAWC,GAAM9B,EAAO,IAAKD,EAAKI,MAAO2B,EAAEC,OAAOH,QAASN,SAE1DzB,EAAYuC,KAAKC,IAChBjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAAYV,MAAOS,EAAKf,SAC9Be,GADYA,WAOrBd,EAAAA,EAAAA,MAACS,EAAAA,EAAW,CAACC,WAAS,EAAAX,SAAA,EACpBF,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAAAZ,SAAC,aACZF,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLP,MAAO7B,EAAIK,UACXsB,MAAM,UACNG,SAAWC,GAAM9B,EAAO,IAAKD,EAAKK,UAAW0B,EAAEC,OAAOH,QAASN,SAE9DjB,EAAU+B,KAAKC,IACdjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAQ,CAAeV,MAAOS,EAAKE,GAAGjB,SACpCe,EAAKG,MADOH,EAAKE,YAO1BhB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CACLd,QAAQ,WACRe,MAAM,UACNC,QA7DiBC,KACP,KAAd7C,EAAIG,OAA8B,KAAdH,EAAII,OAAkC,KAAlBJ,EAAIK,UAIhDM,EAAAA,EACGmC,KAAK,cAAe9C,GACpBa,MAAMkC,GAAavC,EAAS,WAC5BQ,OAAOC,GAAUE,QAAQC,IAAIH,KAN9BC,MAAM,yBAM+B,EAqDHK,SAC7B,UAGDF,EAAAA,EAAAA,KAACqB,EAAAA,EAAM,CACLd,QAAQ,WACRe,MAAM,YACNC,QA1DiBI,KACzBxC,EAAS,QAAQ,EAyDmBe,SAC7B,gBAKD,C","sources":["constants/url.constant.ts","helpers/http.module.ts","pages/jobs/AddJob.page.tsx"],"sourcesContent":["export const baseUrl = \"https://localhost:7029/api/\";","import axios from \"axios\";\r\nimport { baseUrl } from \"../constants/url.constant\";\r\n\r\nconst httpModule = axios.create({\r\n  baseURL: baseUrl,\r\n});\r\n\r\nexport default httpModule;\r\n","import { useEffect, useState } from \"react\";\r\nimport { ICompany, ICreateJobDto } from \"../../types/global.typing\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport httpModule from \"../../helpers/http.module\";\r\nimport { error } from \"console\";\r\nimport \"./jobs.scss\";\r\n\r\nconst levelsArray: string[] = [\r\n  \"Intern\",\r\n  \"Junior\",\r\n  \"Midlevel\",\r\n  \"Senior\",\r\n  \"TeamLead\",\r\n  \"Cto\",\r\n  \"Architect\",\r\n];\r\n\r\nconst AddJob = () => {\r\n  const [job, setJob] = useState<ICreateJobDto>({\r\n    title: \"\",\r\n    level: \"\",\r\n    companyId: \"\",\r\n  });\r\n  const [companies, setCompanies] = useState<ICompany[]>([]);\r\n  const redirect = useNavigate();\r\n\r\n  useEffect(() => {\r\n    httpModule\r\n      .get<ICompany[]>(\"/Company/Get\")\r\n      .then((reponse) => {\r\n        setCompanies(reponse.data);\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Error\");\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  const handleClickSaveBtn = () => {\r\n    if (job.title === \"\" || job.level === \"\" || job.companyId === \"\") {\r\n      alert(\"Please fill all fields\");\r\n      return;\r\n    }\r\n    httpModule\r\n      .post(\"/Job/Create\", job)\r\n      .then((response) => redirect(\"/jobs\"))\r\n      .catch((error) => console.log(error));\r\n  };\r\n  const handleClickBackBtn = () => {\r\n    redirect(\"/jobs\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"add-job\">\r\n        <h2>Add New Job</h2>\r\n        <TextField\r\n          autoComplete=\"off\"\r\n          label=\"Job Title\"\r\n          variant=\"outlined\"\r\n          value={job.title}\r\n          onChange={(e) => setJob({ ...job, title: e.target.value })}\r\n        />\r\n        {/* The spread operator (...) is used to create a shallow copy of the job object before updating the title property, ensuring that the other properties of job remain unchanged. */}\r\n\r\n        <FormControl fullWidth>\r\n          <InputLabel>Job Level</InputLabel>\r\n          <Select\r\n            value={job.level}\r\n            label=\"Job Level\"\r\n            onChange={(e) => setJob({ ...job, level: e.target.value })}\r\n          >\r\n            {levelsArray.map((item) => (\r\n              <MenuItem key={item} value={item}>\r\n                {item}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth>\r\n          <InputLabel>Company</InputLabel>\r\n          <Select\r\n            value={job.companyId}\r\n            label=\"Company\"\r\n            onChange={(e) => setJob({ ...job, companyId: e.target.value })}\r\n          >\r\n            {companies.map((item) => (\r\n              <MenuItem key={item.id} value={item.id}>\r\n                {item.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <div className=\"btns\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={handleClickSaveBtn}\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            onClick={handleClickBackBtn}\r\n          >\r\n            Back\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddJob;\r\n"],"names":["axios","create","baseURL","levelsArray","AddJob","job","setJob","useState","title","level","companyId","companies","setCompanies","redirect","useNavigate","useEffect","httpModule","get","then","reponse","data","catch","error","alert","console","log","_jsx","className","children","_jsxs","TextField","autoComplete","label","variant","value","onChange","e","target","FormControl","fullWidth","InputLabel","Select","map","item","MenuItem","id","name","Button","color","onClick","handleClickSaveBtn","post","response","handleClickBackBtn"],"sourceRoot":""}